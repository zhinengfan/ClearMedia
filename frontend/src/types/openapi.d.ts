/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/files': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Media Files
     * @description 查询媒体文件列表，支持分页、状态筛选、文件名搜索和排序。
     *
     *     Args:
     *         skip: 跳过的记录数（用于分页）
     *         limit: 返回的记录数限制，默认20，最大500
     *         status: 可选的状态筛选条件，支持单个状态或逗号分隔的多个状态
     *         search: 可选的文件名或文件路径模糊搜索关键词
     *         sort: 排序方式，格式为 'field:direction'，如 'created_at:desc'
     *         db: 数据库会话依赖
     *
     *     Returns:
     *         dict: 包含total、skip、limit和items的分页结果
     */
    get: operations['get_media_files_api_files_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/files/suggest': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Suggest Filenames
     * @description 根据文件名前缀提供自动补全建议。
     *
     *     Args:
     *         keyword: 文件名前缀关键字（必填）
     *         limit: 返回的建议数量限制，默认20，最大100
     *         db: 数据库会话依赖
     *
     *     Returns:
     *         dict: 包含suggestions列表的响应
     */
    get: operations['suggest_filenames_api_files_suggest_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/files/{file_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Media File
     * @description 根据文件ID获取单个媒体文件详情。
     *
     *     Args:
     *         file_id: 媒体文件的ID
     *         db: 数据库会话依赖
     *
     *     Returns:
     *         MediaFile: 媒体文件详情
     *
     *     Raises:
     *         HTTPException: 当文件不存在时返回404错误
     */
    get: operations['get_media_file_api_files__file_id__get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/stats': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Media Stats
     * @description 获取按状态分组的媒体文件数量统计。
     *
     *     Args:
     *         db: 数据库会话依赖
     *
     *     Returns:
     *         dict: 按状态分组的文件数量统计，格式为 {status: count}
     *               如果数据库为空，返回空对象 {}
     */
    get: operations['get_media_stats_api_stats_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/files/{file_id}/retry': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Retry Media File
     * @description 手动重试处理失败或无匹配的媒体文件。
     *
     *     该接口仅将文件状态重置为 PENDING，由后台 Producer 统一重新入队。
     *
     *     处理流程：
     *     1. API 验证文件存在性和状态合法性
     *     2. 将文件状态从失败状态（FAILED/NO_MATCH/CONFLICT）重置为 PENDING
     *     3. 后台 Producer 组件会定期轮询 PENDING 状态的文件
     *     4. Producer 将这些文件ID加入处理队列
     *     5. Worker 从队列获取文件ID并执行实际的媒体文件处理
     *
     *     Args:
     *         file_id: 媒体文件的ID
     *         db: 数据库会话依赖
     *
     *     Returns:
     *         dict: 包含以下字段的操作结果：
     *             - message: 操作结果描述
     *             - file_id: 文件ID
     *             - previous_status: 重置前的状态
     *             - current_status: 重置后的状态（始终为 PENDING）
     *
     *     Raises:
     *         HTTPException:
     *             - 404: 当文件不存在时
     *             - 400: 当文件状态不允许重试时（非 FAILED/NO_MATCH/CONFLICT）
     *             - 500: 当数据库操作失败时
     */
    post: operations['retry_media_file_api_files__file_id__retry_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/files/batch-retry': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Batch Retry Media Files
     * @description 批量重试处理失败或无匹配的媒体文件。
     *
     *     该接口仅将文件状态重置为 PENDING，由后台 Producer 统一重新入队。
     *
     *     Args:
     *         request: 包含文件ID列表的请求体
     *         db: 数据库会话依赖
     *
     *     Returns:
     *         dict: 包含批量操作结果的响应
     *
     *     Raises:
     *         HTTPException: 当请求无效时
     */
    post: operations['batch_retry_media_files_api_files_batch_retry_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/files/batch-delete': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Batch Delete Media Files
     * @description 批量删除媒体文件记录（可选功能）。
     *
     *     注意：此操作仅删除数据库记录，不删除实际文件。
     *
     *     Args:
     *         request: 包含文件ID列表的请求体
     *         db: 数据库会话依赖
     *
     *     Returns:
     *         dict: 包含批量操作结果的响应
     *
     *     Raises:
     *         HTTPException: 当请求无效时
     */
    post: operations['batch_delete_media_files_api_files_batch_delete_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/config': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Config
     * @description 获取当前配置信息
     *
     *     返回当前系统的所有配置项，敏感字段（如API密钥）会进行脱敏处理。
     *     同时返回配置黑名单列表。
     *
     *     Args:
     *         db: 数据库会话依赖
     *
     *     Returns:
     *         ConfigGetResponse: 包含所有配置项的响应对象，敏感字段已脱敏
     */
    get: operations['get_config_api_config_get'];
    put?: never;
    /**
     * Update Config
     * @description 更新配置项
     *
     *     接收配置更新请求，仅允许更新不在黑名单中的配置项。
     *     更新成功后会触发配置热重载。
     *
     *     Args:
     *         config_updates: 要更新的配置项字典
     *         db: 数据库会话依赖
     *
     *     Returns:
     *         ConfigUpdateResponse: 更新结果信息，包含更新后的配置
     *
     *     Raises:
     *         HTTPException: 当配置验证失败或更新失败时
     */
    post: operations['update_config_api_config_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read Root */
    get: operations['read_root__get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** BatchOperationRequest */
    BatchOperationRequest: {
      /** File Ids */
      file_ids: number[];
    };
    /** BatchOperationResponse */
    BatchOperationResponse: {
      /** Message */
      message: string;
      /** Results */
      results: components['schemas']['BatchOperationResult'][];
    };
    /** BatchOperationResult */
    BatchOperationResult: {
      /** File Id */
      file_id: number;
      /** Success */
      success: boolean;
      /** Error */
      error?: string | null;
    };
    /** ConfigGetResponse */
    ConfigGetResponse: {
      /** Config */
      config: {
        [key: string]: unknown;
      };
      /** Blacklist Keys */
      blacklist_keys: string[];
      /** Message */
      message: string;
    };
    /** ConfigUpdateResponse */
    ConfigUpdateResponse: {
      /** Message */
      message: string;
      /** Config */
      config: {
        [key: string]: unknown;
      };
      /** Blacklist Keys */
      blacklist_keys: string[];
      /** Updated Keys */
      updated_keys?: string[] | null;
      /** Rejected Keys */
      rejected_keys?: string[] | null;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components['schemas']['ValidationError'][];
    };
    /** MediaFileDetail */
    MediaFileDetail: {
      /** Id */
      id: number;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
      /** Inode */
      inode: number;
      /** Device Id */
      device_id: number;
      /** Original Filepath */
      original_filepath: string;
      /** Original Filename */
      original_filename: string;
      /** File Size */
      file_size: number;
      /** Status */
      status: string;
      /** Llm Guess */
      llm_guess?: {
        [key: string]: unknown;
      } | null;
      /** Tmdb Id */
      tmdb_id?: number | null;
      /** Media Type */
      media_type?: string | null;
      /** Processed Data */
      processed_data?: {
        [key: string]: unknown;
      } | null;
      /** New Filepath */
      new_filepath?: string | null;
      /** Error Message */
      error_message?: string | null;
      /**
       * Retry Count
       * @default 0
       */
      retry_count: number;
    };
    /** MediaFileItem */
    MediaFileItem: {
      /** Id */
      id: number;
      /** Inode */
      inode: number;
      /** Device Id */
      device_id: number;
      /** Original Filepath */
      original_filepath: string;
      /** Original Filename */
      original_filename: string;
      /** File Size */
      file_size: number;
      /** Status */
      status: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
    };
    /** MediaFilesResponse */
    MediaFilesResponse: {
      /** Total */
      total: number;
      /** Skip */
      skip: number;
      /** Limit */
      limit: number;
      /** Has Next */
      has_next: boolean;
      /** Has Previous */
      has_previous: boolean;
      /** Items */
      items: components['schemas']['MediaFileItem'][];
    };
    /** RetryResponse */
    RetryResponse: {
      /** Message */
      message: string;
      /** File Id */
      file_id: number;
      /** Previous Status */
      previous_status: string;
      /** Current Status */
      current_status: string;
    };
    /** SuggestionResponse */
    SuggestionResponse: {
      /** Suggestions */
      suggestions: string[];
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  get_media_files_api_files_get: {
    parameters: {
      query?: {
        /** @description 跳过的记录数 */
        skip?: number;
        /** @description 返回的记录数限制（最大500） */
        limit?: number;
        /** @description 按文件名模糊搜索 */
        search?: string | null;
        /** @description 按状态筛选，支持多个状态用逗号分隔: PENDING, QUEUED, PROCESSING, COMPLETED, FAILED, CONFLICT, NO_MATCH */
        status?: string | null;
        /** @description 排序方式，格式为 'field:direction'。支持字段: created_at, updated_at, original_filename, status。支持方向: asc, desc */
        sort?: string | null;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['MediaFilesResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  suggest_filenames_api_files_suggest_get: {
    parameters: {
      query: {
        /** @description 文件名前缀关键字 */
        keyword: string;
        /** @description 返回建议数量限制，默认20，最大100 */
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SuggestionResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_media_file_api_files__file_id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        file_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['MediaFileDetail'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_media_stats_api_stats_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            [key: string]: number;
          };
        };
      };
    };
  };
  retry_media_file_api_files__file_id__retry_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        file_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RetryResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  batch_retry_media_files_api_files_batch_retry_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['BatchOperationRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['BatchOperationResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  batch_delete_media_files_api_files_batch_delete_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['BatchOperationRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['BatchOperationResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_config_api_config_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ConfigGetResponse'];
        };
      };
    };
  };
  update_config_api_config_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': {
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ConfigUpdateResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  read_root__get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
    };
  };
}
